id: confirm
type: PageSiderMenu
properties:
  title: Check data
  _ref: logo.yaml
requests:
  - id: validate_token
    type: AxiosHttp
    connectionId: jwt_api
    properties:
      method: get
      url: { _string.concat: [ 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.', _get: { from: { _object.keys: { _url_query: true } }, key: 0 } ] }
areas:
  header:
    _ref: header.yaml
  content:
    blocks:
      - id: result
        type: Result
        properties:
          icon: AuditOutlined
          status: success
          subTitle: To log in, please enter the secret access key you received from us.
          title: Email address verified
        layout:
          contentGutter: 16
        areas:
          content:
            blocks:
              - id: secret_key
                type: PasswordInput
                properties: { label: { inline: true }, title: Your secret key, autoFocus: true }
                required: true
                validate:
                  - message: Invalid key
                    status: error
                    pass: { _regex: { pattern: '^[a-zA-Z0-9\-_]{22}$' } }
              - id: decrypt_button
                type: Button
                properties: { icon: UnlockOutlined, title: Decrypt }
                events:
                  onClick:
                    try:
                      - id: validate_all
                        type: Validate
                      - id: decrypt_name
                        type: JsAction
                        params: { name: aesGcmDecrypt, args: [ _state: record_data.0, _state: secret_key ] }
                        messages: { error: The key you entered is invalid }
                      - id: decrypt_mailto
                        type: JsAction
                        params: { name: aesGcmDecrypt, args: [ _state: record_data.1, _state: secret_key ] }
                        messages: { error: The key you entered is invalid }
                      - id: set_decrypted_message
                        type: SetState
                        params: { name: { _actions: decrypt_name.response } }
                      - id: set_decrypted_message
                        type: SetState
                        params: { mailto: { _actions: decrypt_mailto.response } }
                      - id: link_profile
                        type: Link
                        params:
                          pageId: profile
                          input:
                            name: { _actions: decrypt_name.response }
                            mailto: { _actions: decrypt_mailto.response }
                            key: { _state: secret_key }
                    catch:
                      - id: reset
                        type: Reset
events:
  onEnter:
    try:
      - id: validate_token
        type: Request
        params: validate_token
        messages: { error: false }
      - id: set_record_data
        type: SetState
        params: { record_data: { _string.split: { on: { _get: { key: 0.data.sub, from: { _actions: validate_token.response } } }, separator: . } } }
    catch:
      - id: link_away
        type: Link
        params: token_error
