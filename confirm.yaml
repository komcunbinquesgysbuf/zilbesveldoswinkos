id: confirm
type: Context
properties:
  title: Check data
  _ref: logo.yaml
requests:
  - id: verify_token
    type: AxiosHttp
    connectionId: verification_api
    properties:
      url: /healthz
      method:
        _if:
          test:
            _eq:
              - _string.substring: [ _get: { from: { _object.keys: { _url_query: true } }, key: 0 }, 0, 40 ]
              - _hash.sha1:
                  _string.concat:
                    - _string.substring: [ _get: { from: { _object.keys: { _url_query: true } }, key: 0 }, 40 ]
                    - _secret: TOKEN_KEY
          then: get
          else: reset
areas:
  header:
    _ref: header.yaml
  content:
    blocks:
      - id: result
        type: Result
        properties:
          icon: AuditOutlined
          status: success
          subTitle: To log in, please enter the secret access key you received from us.
          title: Email address verified
        layout:
          contentGutter: 16
        areas:
          content:
            blocks:
              - id: secret_key
                type: PasswordInput
                properties: { label: { inline: true }, title: Your secret key, autoFocus: true }
                required: true
                validate:
                  - message: Invalid key
                    status: error
                    pass: { _regex: { pattern: '^[a-zA-Z0-9\-_]{22}$' } }
              - id: decrypt_button
                type: Button
                properties: { icon: UnlockOutlined, title: Decrypt }
                events:
                  onClick:
                    try:
                      - id: validate_all
                        type: Validate
                      - id: decrypt_initiator
                        type: JsAction
                        params: { name: aesGcmDecrypt, args: [ _state: record_data, _state: secret_key ] }
                        messages: { error: The key you entered is invalid }
                      - id: set_initiator
                        type: SetState
                        params: { initiator: { _json.parse: { _actions: decrypt_initiator.response } } }
                      - id: link_profile
                        type: Link
                        params:
                          pageId: profile
                          input:
                            name: { _state: initiator.0 }
                            mailto: { _state: initiator.1 }
                            key: { _state: secret_key }
                    catch:
                      - id: reset
                        type: SetState
                        params: { secret_key: null }
events:
  onEnter:
    try:
      - id: verify_token
        type: Request
        params: verify_token
        messages:
          error: false
      - id: set_record_data
        type: SetState
        params: { record_data: { _string.substring: [ _get: { from: { _object.keys: { _url_query: true } }, key: 0 }, 40 ] } }
    catch:
      - id: link_away
        type: Link
        params: token_error
